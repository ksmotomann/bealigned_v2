import { Router } from 'express';
import { authenticate, AuthRequest } from '../middleware/auth';
import { openaiService } from '../services/openai';
import { supabaseAdmin } from '../services/supabase';

const router = Router();

// Test endpoint (temporary) - no auth required
router.get('/test', (req, res) => {
  console.log('AI Assistant test endpoint hit!');
  res.json({ message: 'AI Assistant endpoint is working!' });
});

// Temporary test query endpoint - no auth required
router.post('/test-query', (req, res) => {
  console.log('AI Assistant test query endpoint hit!');
  console.log('Request body:', req.body);
  res.json({ 
    response: 'Hello! This is a test response from the AI Assistant. The endpoint is working correctly!',
    timestamp: new Date().toISOString()
  });
});

router.use(authenticate);

// Email AI conversation endpoint
router.post('/email-conversation', async (req: AuthRequest, res) => {
  console.log('AI Assistant email conversation endpoint hit by user:', req.userId);
  
  const { responses } = req.body;
  
  if (!responses || !Array.isArray(responses) || responses.length === 0) {
    return res.status(400).json({ error: 'No conversation to email' });
  }
  
  try {
    // Get user profile for email
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('profiles')
      .select('email, first_name, last_name')
      .eq('id', req.userId)
      .single();
    
    if (profileError || !profile?.email) {
      console.error('Error fetching user profile:', profileError);
      return res.status(400).json({ error: 'Could not find user email' });
    }
    
    // Format the conversation for email
    const conversationHtml = responses.map((resp: any) => {
      const isUserMessage = resp.response.startsWith('**You asked:**');
      const content = isUserMessage 
        ? resp.response.replace('**You asked:** ', '') 
        : resp.response;
      const label = isUserMessage ? 'You' : 'AI Assistant';
      const time = new Date(resp.timestamp).toLocaleString();
      
      return `
        <div style="margin-bottom: 20px; padding: 15px; background-color: ${isUserMessage ? '#f3e8ff' : '#f3f4f6'}; border-radius: 8px;">
          <div style="font-weight: bold; color: ${isUserMessage ? '#7c3aed' : '#374151'}; margin-bottom: 5px;">
            ${label} - ${time}
          </div>
          <div style="white-space: pre-wrap; color: #1f2937;">
            ${content.replace(/\n/g, '<br>')}
          </div>
        </div>
      `;
    }).join('');
    
    const emailHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }
          h1 { color: #7c3aed; }
          .header { background: linear-gradient(to right, #f3e8ff, #e0e7ff); padding: 20px; border-radius: 8px; margin-bottom: 30px; }
          .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Your BeAligned AI Assistant Conversation</h1>
          <p>Here's a copy of your AI Assistant conversation from ${new Date().toLocaleDateString()}.</p>
        </div>
        
        ${conversationHtml}
        
        <div class="footer">
          <p>This conversation was generated by the BeAligned AI Assistant based on your personal journey and conversation history.</p>
          <p>Keep this for your records or future reflection.</p>
          <br>
          <p><strong>BeAlignedâ„¢</strong> - Your Personal Growth Companion</p>
        </div>
      </body>
      </html>
    `;
    
    // Send email using the email service
    const { emailService } = await import('../services/email');
    
    await emailService.sendEmail({
      to: profile.email,
      subject: `BeAligned AI Assistant Conversation - ${new Date().toLocaleDateString()}`,
      html: emailHtml
    });
    
    console.log(`AI conversation emailed successfully to ${profile.email}`);
    
    res.json({ 
      success: true,
      message: `Conversation sent to ${profile.email}`
    });
    
  } catch (error: any) {
    console.error('Failed to email AI conversation:', error);
    res.status(500).json({ 
      error: 'Failed to send email',
      details: error.message 
    });
  }
});

// Get AI assistant logs (admin only)
router.get('/logs', async (req: AuthRequest, res) => {
  console.log('AI Assistant logs endpoint hit by user:', req.userId);
  
  try {
    // Check if user is admin or super admin
    const { data: profile } = await supabaseAdmin
      .from('profiles')
      .select('is_admin, is_super_admin')
      .eq('id', req.userId)
      .single();

    if (!profile?.is_admin && !profile?.is_super_admin) {
      return res.status(403).json({ error: 'Admin access required' });
    }

    const { limit = 100, offset = 0, user_id } = req.query;

    let query = supabaseAdmin
      .from('ai_assistant_logs')
      .select(`
        id,
        user_id,
        query,
        response,
        response_time_ms,
        error_message,
        created_at,
        profiles!ai_assistant_logs_user_id_fkey(
          email,
          first_name,
          last_name
        )
      `)
      .order('created_at', { ascending: false })
      .limit(Number(limit))
      .range(Number(offset), Number(offset) + Number(limit) - 1);

    // Filter by user if specified
    if (user_id) {
      query = query.eq('user_id', user_id);
    }

    const { data: logs, error, count } = await query;

    if (error) {
      console.error('Error fetching AI assistant logs:', error);
      throw error;
    }

    console.log('Successfully fetched AI assistant logs:', logs?.length || 0);

    res.json({
      data: logs || [],
      total: count,
      limit: Number(limit),
      offset: Number(offset)
    });

  } catch (error: any) {
    console.error('AI Assistant logs error:', error);
    res.status(500).json({ 
      error: 'Failed to fetch AI assistant logs',
      details: error.message 
    });
  }
});

// AI Assistant query endpoint
router.post('/query', async (req: AuthRequest, res) => {
  console.log('AI Assistant endpoint hit!');
  console.log('Request body:', req.body);
  console.log('User ID:', req.userId);
  
  const { query } = req.body;

  if (!query || typeof query !== 'string') {
    console.log('Invalid query provided:', query);
    return res.status(400).json({ error: 'Query is required and must be a string' });
  }

  const startTime = Date.now();
  
  try {
    console.log(`AI Assistant query from user ${req.userId}: ${query}`);

    // Get user profile information
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('profiles')
      .select('email, first_name, last_name, created_at')
      .eq('id', req.userId)
      .single();

    if (profileError) {
      console.error('Error fetching user profile:', profileError);
      throw profileError;
    }

    // Get all user's conversations with messages
    const { data: conversations, error: conversationsError } = await supabaseAdmin
      .from('conversations')
      .select(`
        id,
        title,
        created_at,
        updated_at,
        is_completed,
        completed_at,
        session_duration_minutes,
        messages (
          id,
          role,
          content,
          created_at
        )
      `)
      .eq('user_id', req.userId)
      .is('archived_at', null)
      .order('created_at', { ascending: true });

    if (conversationsError) {
      console.error('Error fetching conversations:', conversationsError);
      throw conversationsError;
    }

    // Get recent refinements for additional context
    const { data: refinements, error: refinementsError } = await supabaseAdmin
      .from('refinements')
      .select(`
        refined_content,
        notes,
        refinement_type,
        created_at,
        messages!inner (
          conversation_id,
          conversations!inner (
            user_id
          )
        )
      `)
      .eq('messages.conversations.user_id', req.userId)
      .order('created_at', { ascending: false })
      .limit(10);

    if (refinementsError) {
      console.warn('Error fetching refinements (non-critical):', refinementsError);
    }

    // Prepare context for OpenAI
    const userContext = {
      profile: {
        name: profile.first_name ? `${profile.first_name} ${profile.last_name || ''}`.trim() : profile.email,
        email: profile.email,
        memberSince: profile.created_at,
        totalConversations: conversations?.length || 0,
        completedConversations: conversations?.filter(c => c.is_completed).length || 0
      },
      conversations: conversations?.map(conv => ({
        title: conv.title,
        date: conv.created_at,
        completed: conv.is_completed,
        duration: conv.session_duration_minutes,
        messageCount: conv.messages?.length || 0,
        // Include recent messages for context (last 5 messages per conversation)
        recentMessages: conv.messages?.slice(-5).map(msg => ({
          role: msg.role,
          content: msg.content.substring(0, 500), // Truncate long messages
          timestamp: msg.created_at
        })) || []
      })) || [],
      refinements: refinements?.map(ref => ({
        content: ref.refined_content?.substring(0, 300),
        notes: ref.notes,
        type: ref.refinement_type,
        date: ref.created_at
      })) || [],
      query: query
    };

    // Create a comprehensive prompt for the AI assistant
    const systemPrompt = `You are an empathetic AI assistant helping a user reflect on their personal growth journey using the BeAligned app. You have access to their conversation history, profile information, and any coaching refinements.

User Profile:
- Name: ${userContext.profile.name}
- Member since: ${new Date(userContext.profile.memberSince).toLocaleDateString()}
- Total conversations: ${userContext.profile.totalConversations}
- Completed sessions: ${userContext.profile.completedConversations}

About BeAligned App Features:
- **Chat Sessions**: Users can have guided conversations to explore their thoughts and feelings
- **Progress Tracking**: The app tracks conversation patterns and personal insights over time
- **Completion System**: Users can mark conversations as "complete" to track session progress
- **Admin Features**: Coaches can provide refinements and feedback on conversations
- **Issue/Feedback System**: Users can submit feature requests and report issues
- **PDF Export**: Conversations can be exported as PDFs for reflection or sharing
- **AI Assistant (this feature)**: Provides contextual insights based on conversation history

Additional BeAligned Resources:
- BeAligned offers personalized coaching sessions with certified life coaches
- The app includes guided reflection exercises and journaling prompts
- Users can access their conversation history anytime for review and reflection
- The platform provides progress analytics to track personal growth over time
- BeAligned offers workshops and group sessions for deeper learning
- Premium features include one-on-one coaching calls and advanced analytics

Based on their conversation history and the specific query, provide thoughtful, personalized insights. Look for:
- Patterns and themes across conversations
- Progress and growth over time
- Recurring challenges or concerns
- Positive developments and breakthroughs
- Areas that might need more attention
- How to better utilize BeAligned app features
- Suggestions for additional BeAligned resources that might help

Be supportive, insightful, and help them see their journey from a broader perspective. Reference specific conversations or themes when relevant, but maintain privacy and respect.

Conversation History Summary:
${userContext.conversations.map((conv, i) => 
  `${i + 1}. "${conv.title}" (${new Date(conv.date).toLocaleDateString()}) - ${conv.messageCount} messages${conv.completed ? ', completed' : ''}`
).join('\n')}

Recent conversation themes and content:
${userContext.conversations.slice(-3).map(conv => 
  `"${conv.title}": ${conv.recentMessages.map(msg => 
    `${msg.role}: ${msg.content.substring(0, 200)}...`
  ).join(' | ')}`
).join('\n\n')}

${userContext.refinements.length > 0 ? `
Recent coaching insights:
${userContext.refinements.slice(0, 3).map(ref => 
  `${ref.type}: ${ref.content}${ref.notes ? ` (Notes: ${ref.notes})` : ''}`
).join('\n')}
` : ''}

Please respond to their query with warmth, insight, and specific references to their journey when appropriate.`;

    const userPrompt = `${query}`;

    // Get response from OpenAI
    const response = await openaiService.getChatCompletion([
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ]);

    const endTime = Date.now();
    const responseTime = endTime - startTime;

    console.log('AI Assistant response generated successfully');

    // Log the interaction
    try {
      await supabaseAdmin
        .from('ai_assistant_logs')
        .insert({
          user_id: req.userId,
          query: query,
          response: response,
          response_time_ms: responseTime
        });
      console.log('AI Assistant interaction logged successfully');
    } catch (logError) {
      console.error('Failed to log AI Assistant interaction:', logError);
      // Don't fail the request if logging fails
    }

    res.json({
      response: response,
      timestamp: new Date().toISOString()
    });

  } catch (error: any) {
    console.error('AI Assistant error:', error);

    // Log the error
    try {
      const endTime = Date.now();
      const responseTime = endTime - (startTime || Date.now());
      
      await supabaseAdmin
        .from('ai_assistant_logs')
        .insert({
          user_id: req.userId,
          query: query,
          response: '',
          response_time_ms: responseTime,
          error_message: error.message
        });
      console.log('AI Assistant error logged successfully');
    } catch (logError) {
      console.error('Failed to log AI Assistant error:', logError);
    }

    res.status(500).json({ 
      error: 'Failed to process AI assistant query',
      details: error.message 
    });
  }
});

export default router;